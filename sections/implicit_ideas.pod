=head3 Implicit Ideas

Z<implicit_ideas>

Like many spoken languages, Perl provides linguistic shortcuts.  Context is one
such feature.  Both the compiler and a programmer reading the code can
understand the expected number of results or the type of an operation from
existing information without adding additional explicit information to
disambiguate.  Others also exist.

=head4 The Default Scalar Variable

X<default scalar variable>
X<variables; $_>
X<$_>

The best example a linguistic shortcut in Perl is the default scalar variable,
C<$_>.  It's most notable in its I<absence>: many of Perl's built in operations
perform their work on the contents of C<$_> in the absence of an explicit
variable.  You can still use C<$_> as the variable, but it's often unnecessary.

For example, the C<chomp> operator removes any trailing newline sequence from
the given string:

=begin programlisting

    my $uncle = "Bob\n";
    say "'$uncle'";
    chomp $uncle;
    say "'$uncle'";

=end programlisting

Without an explicit variable, C<chomp> removes the trailing newline sequence
from C<$_>.  Thus, if C<$_> contains the string C<Jim\n>, these two lines of
code are equivalent:

=begin programlisting

    chomp $_;
    chomp;

=end programlisting

Similarly, the C<say> and C<print> builtins operate on C<$_> in the absence of
other arguments:

=begin programlisting

    print;  # prints $_
    say;    # prints $_ with a trailing newline

=end programlisting

=begin sidebar

If you use the three-argument form of C<print> and C<say>, where the first
argument is a filehandle to which to print, you cannot omit C<$_>; Perl will
interpret this as the two-argument form of both functions.

=end sidebar

Perl's regular expression facilities (L<regular_expressions>) can also operate
on C<$_>, performing matches, substitutions, and transliterations:

=begin programlisting

    $_ = 'My name is Paquito';
    say if /My name is/;

    s/Paquito/Paquita/;

    tr/A-Z/a-z/;
    say;

=end programlisting

=for author

Check how many other string functions this includes?

=end for

Many of Perl's scalar operators work on the default scalar variable if you do
not provide an alternative.

Perl's looping constructs also set C<$_>.  For example, iterating over a list
with C<for>:

=begin programlisting

    say "#B<$_>" for 1 .. 10;

    for (1 .. 10)
    {
        say "#B<$_>";
    }

=end programlisting

... or C<while>:

=begin programlisting

    while (<STDIN>)
    {
        chomp;
        say scalar reverse;
    }

=end programlisting

... or transforming a list through the use of C<map>:

=begin programlisting

    my @squares = map { B<$_> * B<$_> } 1 .. 10;
    say for @squares;

=end programlisting

=begin sidebar

Note that C<sort> does not set C<$_>, as it must process the elements of its
list two at a time.

=end sidebar

If you call subroutines within code that uses C<$_> whether implicitly or
explicitly, they may overwrite the value of C<$_>.  Similarly, if you write a
subroutine which uses C<$_>, you may clobber a caller subroutine's use of
C<$_>.  Perl 5.10 allows you to use C<my> to declare C<$_> as a lexical
variable, which prevents this clobbering behavior.  Be wise.

=begin programlisting

    while (<STDIN>)
    {
        chomp;

        # BAD EXAMPLE
        my $munged = calculate_value( $_ );
        say "Original: $_";
        say "Munged  : $munged";
    }

=end programlisting

In this example, if C<calculate_value()> or any other subroutine it happened to
call changed C<$_>, it would remain changed throughout the C<while> loop.
Adding a C<my> declaration prevents that behavior:

=begin programlisting

    while (my $_ = <STDIN>)
    {
        ...
    }

=end programlisting

Of course, using a named lexical can be just as clear:

=begin programlisting

    while (my $line = <STDIN>)
    {
        ...
    }

=end programlisting

Use C<$_> as you would the word "it" in formal writing: sparingly, in small and well-defined scopes.

=head4 The Default Array Variables

X<default array variables>
X<variables; @_>
X<@_>

Another default variable is available inside Perl subroutines; this is C<@_>.
Perl passes arguments to subroutines in this array.  Array manipulation
operations (L<arrays>) performed inside subroutines affect this array by
default.  Thus, these two snippets of code are equivalent:

=begin programlisting

    sub foo
    {
        my $arg = shift;
        ...
    }

    sub foo_explicit
    {
        my $arg = shift @_;
        ...
    }

=end programlisting

I<Unlike> C<$_>, Perl automatically localizes C<@_> for you when you call other
subroutines.  Array functions such as C<unshift>, C<push>, C<splice>, and
C<pop> operate on C<@_>.

X<variables; @ARGV>
X<@ARGV>

Outside of a subroutine, the default array variable is C<@ARGV>.  This array
represents all command-line arguments to the program.  The same array functions
which use C<@_> implicitly I<within> subroutines use C<@ARGV> implicitly at the
top level of a program outside of any subroutine.  You cannot use C<@_> when
you mean C<@ARGV>.

X<null filehandle>
X<@ARGV>

Perl uses C<@ARGV> implicitly in one special case where it does not use C<@_>.
If you read from the null filehandle C<< <> >>, Perl will treat every element
in C<@ARGV> as the I<name> of a file to open for reading.  (If C<@ARGV> is
empty, Perl will read from standard input.)  It's easy to write a simple
command-line filter which reverses its input:

=begin programlisting

    while (<>)
    {
        chomp;
        say scalar reverse;
    }

=end programlisting

If you run it with a list of files:

=begin screen

    $ B<perl reverse_lines.pl encrypted/*.txt>

=end screen

... the result will be one long stream of output.  Without any arguments, you
can provide your own standard input by piping in from another program or typing
directly.

The implicit C<@ARGV> behavior can be useful for writing short filter programs
in Perl, but avoid it in larger programs.
